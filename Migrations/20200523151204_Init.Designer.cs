// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TreeWithReact.Helpers;

namespace TreeWithReact.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200523151204_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TreeWithReact.Entities.Leaf", b =>
                {
                    b.Property<int>("LeafId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("int");

                    b.HasKey("LeafId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("TreeWithReact.Entities.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("int");

                    b.HasKey("NodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("TreeWithReact.Entities.Leaf", b =>
                {
                    b.HasOne("TreeWithReact.Entities.Node", "ParentNode")
                        .WithMany("SubLeaves")
                        .HasForeignKey("ParentNodeId");
                });

            modelBuilder.Entity("TreeWithReact.Entities.Node", b =>
                {
                    b.HasOne("TreeWithReact.Entities.Node", "ParentNode")
                        .WithMany("SubNodes")
                        .HasForeignKey("ParentNodeId");
                });
#pragma warning restore 612, 618
        }
    }
}
